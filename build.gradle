import org.gradle.internal.os.OperatingSystem

plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2023.1.1-beta-3"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

task copyDeployDir {
    String prefix = 'test-results/frcUserProgramTest/'
    String suffix = 'src/main/deploy'

    println prefix + "platform/version/" + suffix
    println OperatingSystem.current()

    if(OperatingSystem.current().isWindows()){
        println "COPYING DEPLOY FOR WINDOWS"
        println "SRC: " + project.fileTree('src/main/deploy')
        println "TO"
        // Copy debug
        copy {
            from project.fileTree('src/main/deploy')
            into layout.buildDirectory.dir(prefix + "windowsx86-64/debug/" + suffix)
        }
        // Copy release
        copy {
            from project.fileTree('src/main/deploy')
            into layout.buildDirectory.dir(prefix + "windowsx86-64/release/" + suffix)
        }
        println layout.buildDirectory.dir("")
        println prefix + "windowsx86-64/debug/" + suffix
        println prefix + "windowsx86-64/release/" + suffix
        println 'Copied Windows configuration'
        
    } else {
        println "COPYING DEPLOY FOR LINUX"
        println "SRC: " + project.fileTree('src/main/deploy')
        println "TO"
        // Linux Athena
        // Copy debug
        copy {
            from project.fileTree('src/main/deploy')
            into layout.buildDirectory.dir(prefix + "linuxathena/debug/" + suffix)
        }
        // Copy release
        copy {
            from project.fileTree('src/main/deploy')
            into layout.buildDirectory.dir(prefix + "linuxathena/release/" + suffix)
        }
        println layout.buildDirectory.dir("")
        println prefix + "linuxathena/debug/" + suffix
        println prefix + "linuxathena/release/" + suffix

        // Linux x86-64
        // Copy debug
        copy {
            from project.fileTree('src/main/deploy')
            into layout.buildDirectory.dir(prefix + "linuxx86-64/debug/" + suffix)
        }
        // Copy release
        copy {
            from project.fileTree('src/main/deploy')
            into layout.buildDirectory.dir(prefix + "linuxx86-64/release/" + suffix)
        }

        println prefix + "linuxx86-64/release/" + suffix
        println prefix + "linuxx86-64/debug/" + suffix
        println 'Copied Linux configuration'
    } 
    
}

// Copy the deploy/ folder when doing unit tests (check) in order to load things like parameters.
check.dependsOn {
    tasks.findAll {
        task -> task.name.startsWith('copyDeployDir')
    }
}

build.dependsOn {
    tasks.findAll {
        task -> task.name.startsWith('copyDeployDir')
    }
}
